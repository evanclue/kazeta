#! /bin/bash

BASE_DIR="$HOME/.local/share/kazeta"
if [[ ! -d "${BASE_DIR}" ]]; then
	mkdir -p "${BASE_DIR}"
fi

BASE_EXT="/media"
result=$(ls -1 /media | wc -l)
if [[ "$result" == "0" ]]; then
	BASE_EXT="/run/media/${USER}"
	if [[ ! -d "${BASE_EXT}" ]]; then
		BASE_EXT="/run/media"
	fi
fi

function get_attribute {
	info_file="$1"
	attribute=$2
	cat "${info_file}" | grep "^${attribute}=" | head -1 | cut -d= -f2-
}

function device_list {
	free=$(df -m "${BASE_DIR}" | tail -n +2 | head -1 | tr -s ' ' | cut -d' ' -f4)
	echo "internal:::${free}"
	for dir in "${BASE_EXT}"/*; do
		if [[ -d "${dir}" ]]; then
			name=$(basename "${dir}")
			free=$(df -m "${dir}" | tail -n +2 | head -1 | tr -s ' ' | cut -d' ' -f4)
			echo "${name}:::${free}"
		fi
	done
}

function get_save_dir_from_drive_name {
	DRIVE_NAME="$1"
	if [[ ${DRIVE_NAME} == "internal" ]] || [[ -z ${DRIVE_NAME} ]]; then
		SAVE_DIR="${BASE_DIR}/saves/default"
	else
		if [[ ! -d "${BASE_EXT}/${DRIVE_NAME}" ]]; then
			>&2 echo "No such device: ${DRIVE_NAME}"
			exit 1
		fi

		SAVE_DIR="${BASE_EXT}/${DRIVE_NAME}/kazeta/saves"
	fi

	if [[ ! -d "${SAVE_DIR}" ]]; then
		mkdir -p "${SAVE_DIR}" &> /dev/null
	fi

	echo "${SAVE_DIR}"
}

function get_cache_dir_from_drive_name {
	DRIVE_NAME="$1"
	if [[ ${DRIVE_NAME} == "internal" ]] || [[ -z ${DRIVE_NAME} ]]; then
		CACHE_DIR="${BASE_DIR}/cache"
	else
		if [[ ! -d "${BASE_EXT}/${DRIVE_NAME}" ]]; then
			>&2 echo "No such device: ${DRIVE_NAME}"
			exit 1
		fi

		CACHE_DIR="${BASE_EXT}/${DRIVE_NAME}/kazeta/cache"
	fi

	if [[ ! -d "${CACHE_DIR}" ]]; then
		mkdir -p "${CACHE_DIR}" &> /dev/null
	fi

	echo "${CACHE_DIR}"
}

function save_list {
	SAVE_DIR=$(get_save_dir_from_drive_name "$1")
	ls -1 "${SAVE_DIR}" | sed 's/.kzs$//'
}

function save_details {
	SAVE_DIR=$(get_save_dir_from_drive_name "$1")
	CACHE_DIR=$(get_cache_dir_from_drive_name "$1")

	for entry in "${SAVE_DIR}"/*; do
		cart_id=$(basename "${entry}" | sed 's/.kzs$//')
		if [[ -e "${entry}" ]]; then
			name=$(get_attribute "${CACHE_DIR}/${cart_id}/metadata.kzi" 'Name')
			icon="${CACHE_DIR}/${cart_id}/icon.png"
			if [[ -f "${SAVE_DIR}/${cart_id}.kzs" ]]; then
				size=$(du --summarize -m "${SAVE_DIR}/${cart_id}.kzs" | cut -f1)
			else
				size=$(du --exclude="${SAVE_DIR}/${cart_id}/.cache" --summarize -m "${SAVE_DIR}/${cart_id}" | cut -f1)
			fi
			echo "${cart_id}:::${name}:::${icon}:::${size}"
		fi
	done
}

function save_copy {
	CART_ID="$1"
	FROM_DRIVE="$2"
	TO_DRIVE="$3"

	FROM_DIR=$(get_save_dir_from_drive_name "${FROM_DRIVE}")
	TO_DIR=$(get_save_dir_from_drive_name "${TO_DRIVE}")
	FROM_CACHE=$(get_cache_dir_from_drive_name "${FROM_DRIVE}")
	TO_CACHE=$(get_cache_dir_from_drive_name "${TO_DRIVE}")

	if [[ "${FROM_DRIVE}" == "${TO_DRIVE}" ]]; then
		echo "ERROR: Cannot copy to same location"
		exit 1
	fi

	if [[ ! -e "${FROM_DIR}/${CART_ID}" ]] && [[ ! -e "${FROM_DIR}/${CART_ID}.kzs" ]]; then
		echo "ERROR: Save file for ${CART_ID} does not exist on '${FROM_DRIVE}' drive"
		exit 1
	fi

	if [[ -e "${TO_DIR}/${CART_ID}" ]] || [[ -e "${TO_DIR}/${CART_ID}.kzs" ]]; then
		echo "ERROR: Save file for ${CART_ID} already exists on '${TO_DRIVE}'"
		exit 1
	fi

	if [[ "${FROM_DRIVE}" == "internal" ]]; then
		tar c --exclude='./.cache' --directory="${FROM_DIR}/${CART_ID}" . | \
		pv --progress --numeric --direct-io --output "${TO_DIR}/${CART_ID}.kzs" \
			--size $(du --bytes --summarize "${FROM_DIR}/${CART_ID}" | cut -f1)
	elif [[ "${TO_DRIVE}" == "internal" ]]; then
		mkdir -p "${TO_DIR}/${CART_ID}"
		cat "${FROM_DIR}/${CART_ID}.kzs" | pv --progress --numeric \
			--size $(du --bytes --summarize "${FROM_DIR}/${CART_ID}.kzs" | cut -f1) | \
		tar xf - --directory="${TO_DIR}/${CART_ID}"
	else
		cat "${FROM_DIR}/${CART_ID}.kzs" | pv --progress --numeric --direct-io --output "${TO_DIR}/${CART_ID}.kzs" \
			--size $(du --bytes --summarize "${FROM_DIR}/${CART_ID}.kzs" | cut -f1)
	fi

	rm -rf "${TO_CACHE}/${CART_ID}"
	mkdir -p "${TO_CACHE}/${CART_ID}"
	cat "${FROM_CACHE}/${CART_ID}/metadata.kzi" | pv --quiet --direct-io --output "${TO_CACHE}/${CART_ID}/metadata.kzi"
	cat "${FROM_CACHE}/${CART_ID}/icon.png" | pv --quiet --direct-io --output "${TO_CACHE}/${CART_ID}/icon.png"
}

function save_delete {
	CART_ID="$1"
	FROM_DRIVE="$2"

	FROM_DIR=$(get_save_dir_from_drive_name "${FROM_DRIVE}")
	FROM_CACHE=$(get_cache_dir_from_drive_name "${FROM_DRIVE}")

	if [[ ! -e "${FROM_DIR}/${CART_ID}" ]] && [[ ! -e "${FROM_DIR}/${CART_ID}.kzs" ]]; then
		echo "ERROR: Save file for ${CART_ID} does not exist on '${FROM_DRIVE}' drive"
		exit 1
	fi

	if [[ "${FROM_DRIVE}" == "internal" ]]; then
		rm -rf "${FROM_DIR}/${CART_ID}"
	else
		rm -f "${FROM_DIR}/${CART_ID}.kzs"
	fi

	rm -rf "${FROM_CACHE}/${CART_ID}"
}


if [[ "$1" == "device" ]]; then
	case "$2" in
		"list")
			shift 2
			device_list "$1"
			;;
	esac
	exit 0;
fi

if [[ "$1" == "save" ]]; then
	case "$2" in
		"list")
			shift 2
			save_list "$1"
			;;
		"details")
			shift 2
			save_details "$1"
			;;
		"copy")
			shift 2
			save_copy "$1" "$2" "$3"
			;;
		"delete")
			shift 2
			save_delete "$1" "$2"
			;;
	esac
	exit 0;
fi





cart_info=$(find ${BASE_EXT} -maxdepth 2 -name "*.kzi" | head -1)
cart_path=$(dirname "${cart_info}")

if [[ ! -f "${cart_info}" ]]; then
	# no cart found, start bios/memory management app
	gamescope --filter pixel -- kazeta-bios
	exit 0
fi

cart_id="$(get_attribute ${cart_info} 'Id')"
cart_icon="${cart_path}/$(get_attribute ${cart_info} 'Icon')"

mkdir -p "${BASE_DIR}/cache/${cart_id}"
cp ${cart_info} "${BASE_DIR}/cache/${cart_id}/metadata.kzi"
if [[ -f "${cart_icon}" ]]; then
	cp "${cart_icon}" "${BASE_DIR}/cache/${cart_id}/icon.png"
fi

lower="${cart_path}"
upper="${BASE_DIR}/saves/default/${cart_id}"
work="${BASE_DIR}/run/work"
target="${BASE_DIR}/run/cart"

if [[ ! -d "${upper}" ]]; then
	rm -f "${upper}"
	mkdir -p "${upper}"
fi

rm -rf "${BASE_DIR}/run"
mkdir -p "${work}"
mkdir -p "${target}"

fuse-overlayfs -o lowerdir="${lower}",upperdir="${upper}",workdir="${work}" "${target}"
trap "popd; fusermount3 -u ${target}" EXIT

export HOME="${BASE_DIR}/run/cart"
unset XDG_CONFIG_HOME
unset XDG_CACHE_HOME
unset XDG_DATA_HOME
unset XDG_STATE_HOME
pushd "${HOME}"

cart_exec="$(get_attribute ${cart_info} 'Exec')"
cart_gsopts="$(get_attribute ${cart_info} 'GamescopeOptions')"
gamescope ${cart_gsopts} -- ${cart_exec}
